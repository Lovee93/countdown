{"version":3,"sources":["Countdown.js","serviceWorker.js","index.js"],"names":["Countdown","state","days","undefined","hours","minutes","seconds","this","interval","setInterval","deadline","props","countdown","Date","getTime","Math","floor","setState","clearInterval","daysRadius","mapNumber","hoursRadius","minutesRadius","secondsRadius","className","radius","Component","SVGCircle","fill","stroke","stroke-width","d","describeArc","polarToCartesian","centerX","centerY","angleInDegrees","angleInRadians","PI","x","cos","y","sin","startAngle","endAngle","start","end","largeArcFlag","join","number","in_min","in_max","out_min","out_max","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gOAGMA,G,wDAEJ,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,UAAMC,EACNC,WAAOD,EACPE,aAASF,EACTG,aAASH,GANC,E,gEAUQ,IAAD,OACnBI,KAAKC,SAAWC,aAAY,WAAO,IACzBC,EAAa,EAAKC,MAAlBD,SAGFE,EAFO,IAAIC,KAAKH,GAAUI,WACpB,IAAID,MAAOC,UAEjBZ,EAAOa,KAAKC,MAAMJ,EAAS,OAC3BR,EAAQW,KAAKC,MAAOJ,EAAU,MAAX,MACnBP,EAAUU,KAAKC,MAAOJ,EAAS,KAAV,KACrBN,EAAUS,KAAKC,MAAOJ,EAAS,IAAkB,KAEvD,EAAKK,SAAS,CAAEf,OAAME,QAAOC,UAASC,cACrC,O,6CAICC,KAAKC,UACPU,cAAcX,KAAKC,Y,+BAIb,IAAD,EACmCD,KAAKN,MAAvCC,EADD,EACCA,KAAME,EADP,EACOA,MAAOC,EADd,EACcA,QAASC,EADvB,EACuBA,QAExBa,EAAaC,EAAUlB,EAAM,GAAI,EAAG,EAAG,KACvCmB,EAAcD,EAAUhB,EAAO,GAAI,EAAG,EAAG,KACzCkB,EAAgBF,EAAUf,EAAS,GAAI,EAAG,EAAG,KAC7CkB,EAAgBH,EAAUd,EAAS,GAAI,EAAG,EAAG,KAEnD,OACE,yBAAKkB,UAAU,OACb,4BAAQA,UAAU,cAChB,sDACA,yBAAKA,UAAU,WACb,yBAAKA,UAAU,SACX,kBAAC,EAAD,CAAWC,OAAQN,IAClBjB,EACH,sCAEF,yBAAKsB,UAAU,SACb,kBAAC,EAAD,CAAWC,OAAQJ,IAClBjB,EACD,uCAEF,yBAAKoB,UAAU,SACb,kBAAC,EAAD,CAAWC,OAAQH,IAClBjB,EACD,yCAEF,yBAAKmB,UAAU,SACb,kBAAC,EAAD,CAAWC,OAAQF,IAClBjB,EACD,gD,GAhEUoB,cAyElBC,EAAY,SAAC,GAAD,IAAGF,EAAH,EAAGA,OAAH,OACd,yBAAKD,UAAU,iBACX,0BACII,KAAK,OACLC,OAAO,QACPC,eAAa,IACbC,EAAGC,EAAY,GAAI,GAAI,GAAI,EAAGP,OAM1C,SAASQ,EAAiBC,EAASC,EAASV,EAAQW,GAChD,IAAIC,GAAmBD,EAAiB,IAAMrB,KAAKuB,GAAM,IAEzD,MAAO,CACHC,EAAGL,EAAUT,EAASV,KAAKyB,IAAIH,GAC/BI,EAAGN,EAAUV,EAASV,KAAK2B,IAAIL,IAIvC,SAASL,EAAYO,EAAGE,EAAGhB,EAAQkB,EAAYC,GAC3C,IAAIC,EAAQZ,EAAiBM,EAAGE,EAAGhB,EAAQmB,GACvCE,EAAMb,EAAiBM,EAAGE,EAAGhB,EAAQkB,GAErCI,EAAeH,EAAWD,GAAc,IAAM,IAAM,IAgBxD,MAdQ,CACJ,IACAE,EAAMN,EACNM,EAAMJ,EACN,IACAhB,EACAA,EACA,EACAsB,EACA,EACAD,EAAIP,EACJO,EAAIL,GACNO,KAAK,KAMX,SAAS5B,EAAU6B,EAAQC,EAAQC,EAAQC,EAASC,GAChD,OACMJ,EAASC,IAAWG,EAAUD,IAAaD,EAASD,GAAUE,EAIzDpD,QCnHKsD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAWnD,SAAS,2BAEtBoD,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.3b376c2c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass Countdown extends Component {\n  \n  constructor() {\n    super();\n    this.state = {\n      days: undefined,\n      hours: undefined,\n      minutes: undefined,\n      seconds: undefined\n    };\n  };\n\n   componentDidMount() {\n    this.interval = setInterval(() => {\n      const { deadline } = this.props;\n      const then = new Date(deadline).getTime();\n      const now = new Date().getTime();\n      const countdown = then-now;\n      const days = Math.floor(countdown / (1000 * 60 * 60 * 24));\n      const hours = Math.floor((countdown%(1000 * 60 * 60 * 24))/(1000 * 60 * 60));\n      const minutes = Math.floor((countdown % (1000 * 60 * 60)) / (1000 * 60));\n      const seconds = Math.floor((countdown % (1000 * 60)) / 1000);   \n\n      this.setState({ days, hours, minutes, seconds });\n    }, 1000);\n   }\n  \n  componentWillUnmount() {\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n\n  render() {\n    const { days, hours, minutes, seconds } = this.state;\n    // Mapping the date values to radius values\n    const daysRadius = mapNumber(days, 30, 0, 0, 360);\n    const hoursRadius = mapNumber(hours, 24, 0, 0, 360);\n    const minutesRadius = mapNumber(minutes, 60, 0, 0, 360);\n    const secondsRadius = mapNumber(seconds, 60, 0, 0, 360);\n    \n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Time left to upskill: </h1>\n          <div className=\"wrapper\"> \n            <div className=\"items\"> \n                <SVGCircle radius={daysRadius} />\n                {days} \n              <div>Days</div>\n            </div>\n            <div className=\"items\"> \n              <SVGCircle radius={hoursRadius} />\n              {hours} \n              <div>Hours</div>\n            </div>\n            <div className=\"items\"> \n              <SVGCircle radius={minutesRadius} />\n              {minutes} \n              <div>Minutes</div>\n            </div>\n            <div className=\"items\"> \n              <SVGCircle radius={secondsRadius} />\n              {seconds} \n              <div>Seconds</div>\n            </div>\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nconst SVGCircle = ({ radius }) => (\n    <svg className=\"countdown-svg\">\n        <path\n            fill=\"none\"\n            stroke=\"white\"\n            stroke-width=\"4\"\n            d={describeArc(50, 50, 48, 0, radius)}\n        />\n    </svg>\n);\n\n// From StackOverflow: https://stackoverflow.com/questions/5736398/how-to-calculate-the-svg-path-for-an-arc-of-a-circle\nfunction polarToCartesian(centerX, centerY, radius, angleInDegrees) {\n    var angleInRadians = ((angleInDegrees - 90) * Math.PI) / 180.0;\n\n    return {\n        x: centerX + radius * Math.cos(angleInRadians),\n        y: centerY + radius * Math.sin(angleInRadians)\n    };\n}\n\nfunction describeArc(x, y, radius, startAngle, endAngle) {\n    var start = polarToCartesian(x, y, radius, endAngle);\n    var end = polarToCartesian(x, y, radius, startAngle);\n\n    var largeArcFlag = endAngle - startAngle <= 180 ? '0' : '1';\n\n    var d = [\n        'M',\n        start.x,\n        start.y,\n        'A',\n        radius,\n        radius,\n        0,\n        largeArcFlag,\n        0,\n        end.x,\n        end.y\n    ].join(' ');\n\n    return d;\n}\n\n// From StackOverflow: https://stackoverflow.com/questions/10756313/javascript-jquery-map-a-range-of-numbers-to-another-range-of-numbers\nfunction mapNumber(number, in_min, in_max, out_min, out_max) {\n    return (\n        ((number - in_min) * (out_max - out_min)) / (in_max - in_min) + out_min\n    );\n}\n\nexport default Countdown;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Countdown from './Countdown';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Countdown deadline=\"Apr 14, 2020 00:00:00\"/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}