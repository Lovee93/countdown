{"version":3,"sources":["Countdown.js","serviceWorker.js","index.js"],"names":["Countdown","timer","componentDidMount","setInterval","updateTimer","componentWillUnmount","clearInterval","now","Date","getTime","distance","state","newDate","setState","days","Math","floor","hours","minutes","seconds","event","calDate","target","value","this","className","type","name","id","dateFormat","onChange","calcTime","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wPAoFeA,E,kDA9Eb,aAAe,IAAD,8BACZ,gBAUFC,MAAQ,EAXM,EAadC,kBAAoB,WAClB,EAAKD,MAAQE,aAAY,WACvB,EAAKC,gBACJ,MAhBS,EAmBdC,qBAAuB,WACrBC,cAAc,EAAKL,QApBP,EA8BdG,YAAc,WACZ,IAAIG,GAAM,IAAIC,MAAOC,UACjBC,EAAW,EAAKC,MAAMC,QAAUL,EAGpC,EAAKM,SAAS,CACZC,KAAMC,KAAKC,MAAMN,EAAQ,OACzBO,MAAOF,KAAKC,MAAON,EAAQ,MAAT,MAClBQ,QAASH,KAAKC,MAAON,EAAQ,KAAT,KACpBS,QAASJ,KAAKC,MAAON,EAAQ,IAAkB,QArCjD,EAAKC,MAAQ,CACXC,QAAS,IAAIJ,KAAK,YAAYC,UAC9BK,KAAM,EACNG,MAAO,EACPC,QAAS,EACTC,QAAS,GAPC,E,qDAuBLC,GACP,IAAMC,EAAUD,EAAME,OAAOC,MACN,qBAAbF,GACRG,KAAKX,SAAS,CAACD,QAAS,IAAIJ,KAAKa,GAASZ,c,+BAiBpC,IAAD,SAC0Ce,KAAKb,MAAhDG,EADC,EACDA,KAAMG,EADL,EACKA,MAAOC,EADZ,EACYA,QAASC,EADrB,EACqBA,QAASP,EAD9B,EAC8BA,QACjCL,GAAM,IAAIC,MAAOC,UACrB,OACE,yBAAKgB,UAAU,OACb,4BAAQA,UAAU,cAChB,yCACA,yBAAKA,UAAU,qBACf,yBAAKA,UAAU,eACb,2BAAOC,KAAK,OAAOC,KAAK,UAAUF,UAAU,UAAUG,GAAG,UAAUL,MAAOM,IAAWjB,EAAS,cAAekB,SAAU,SAACV,GAAD,OAAW,EAAKW,SAASX,OAJpJ,IAKS,6BACP,yBAAKK,UAAU,WACb,yBAAKA,UAAU,gBACb,uBAAGA,UAAU,yBAAyBb,EAAQL,EAAMO,EAAO,KAC3D,uBAAGW,UAAU,eAAb,SAEF,yBAAKA,UAAU,gBACb,uBAAGA,UAAU,2BAA2Bb,EAAQL,EAAMU,EAAQ,KAC9D,uBAAGQ,UAAU,eAAb,UAEF,yBAAKA,UAAU,gBACb,uBAAGA,UAAU,6BAA6Bb,EAAQL,EAAMW,EAAU,KAClE,uBAAGO,UAAU,eAAb,YAEF,yBAAKA,UAAU,gBACb,uBAAGA,UAAU,6BAA6Bb,EAAQL,EAAMY,EAAU,KAClE,uBAAGM,UAAU,eAAb,mB,GAvEUO,aCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.eb9301f7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport dateFormat from 'dateformat';\n\nclass Countdown extends Component {\n  \n  constructor() {\n    super();\n    this.state = {\n      newDate: new Date('1.1.2021').getTime(), \n      days: 0,\n      hours: 0,\n      minutes: 0,\n      seconds: 0\n    };\n  };\n  \n  timer = 0;    \n  \n  componentDidMount = () => {\n    this.timer = setInterval(() => {\n      this.updateTimer(); \n    }, 1000);\n  }\n\n  componentWillUnmount = () => {\n    clearInterval(this.timer);\n  }\n\n  calcTime(event) {\n    const calDate = event.target.value\n    if(typeof(calDate) !== 'undefined') {\n      this.setState({newDate: new Date(calDate).getTime()});\n    }\n  }\n\n  updateTimer = () => {\n    var now = new Date().getTime();\n    var distance = this.state.newDate - now;\n\n    // Time calculations for days, hours, minutes and seconds\n    this.setState({\n      days: Math.floor(distance / (1000 * 60 * 60 * 24)),\n      hours: Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\n      minutes: Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60)),\n      seconds: Math.floor((distance % (1000 * 60)) / 1000),\n    })\n  } \n\n  render() {\n    var { days, hours, minutes, seconds, newDate } = this.state\n    var now = new Date().getTime();\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Time Left</h1>\n          <div className=\"heart is_animate\"></div>\n          <div className=\"clock-input\">\n            <input type=\"date\" name=\"time-to\" className=\"time-to\" id=\"time-to\" value={dateFormat(newDate, 'yyyy-mm-dd')} onChange={(event) => this.calcTime(event)} />\n          </div> <br/>\n          <div className=\"wrapper\"> \n            <div className=\"clock-column\">\n              <p className=\"clock-day clock-timer\">{newDate>now ? days : 'D'}</p>\n              <p className=\"clock-label\">Days</p>\n            </div>\n            <div className=\"clock-column\">\n              <p className=\"clock-hours clock-timer\">{newDate>now ? hours : 'O'}</p>\n              <p className=\"clock-label\">Hours</p>\n            </div>\n            <div className=\"clock-column\">\n              <p className=\"clock-minutes clock-timer\">{newDate>now ? minutes : 'N'}</p>\n              <p className=\"clock-label\">Minutes</p>\n            </div>\n            <div className=\"clock-column\">\n              <p className=\"clock-seconds clock-timer\">{newDate>now ? seconds : 'E'}</p>\n              <p className=\"clock-label\">Seconds</p>\n            </div>\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default Countdown;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Countdown from './Countdown';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Countdown />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}